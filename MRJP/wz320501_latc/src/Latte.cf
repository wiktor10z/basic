-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type PIdent "(" [Arg] ")" Block ;

--ClDef.     TopDef ::= "class" PIdent Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type PIdent;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= PIdent ; 

Init.      Item ::= PIdent "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= PIdent "=" Expr  ";" ;

ArrAss.    Stmt ::= PIdent "[" Expr "]" "=" Expr ";" ;					--nowe

Incr.      Stmt ::= PIdent "++"  ";" ;

Decr.      Stmt ::= PIdent "--"  ";" ;

Ret.       Stmt ::= PReturn Expr ";" ;

VRet.      Stmt ::= PReturn ";" ;

Cond.      Stmt ::= PIf "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= PIf "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= PWhile "(" Expr ")" Stmt ;

ForEach.   Stmt ::= PFor "(" Type PIdent ":" PIdent ")" Stmt ;			--nowe

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

Array.     Type ::= Type "[]" ;											--nowe

--Class.     Type ::= PIdent ; 

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= PIdent ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= PIdent "(" [Expr] ")" ;

ENewArr.   Expr6 ::= PNew Type "[" Expr "]" ;							--nowe

EArrInd.   Expr6 ::= PIdent "[" Expr "]" ;								--nowe

EAttr.     Expr6 ::= PIdent "." PIdent ;								--nowe

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= PMinus Expr6 ;

Not.       Expr5 ::= PNot Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 PAnd Expr1 ;

EOr.       Expr ::= Expr1 POr Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= PPlus ;

Minus.     AddOp ::= PMinus ;

Times.     MulOp ::= PTimes ;

Div.       MulOp ::= PDiv ;

Mod.       MulOp ::= PMod ;

LTH.       RelOp ::= PLTH ;

LE.        RelOp ::= PLE ;

GTH.       RelOp ::= PGTH ;

GE.        RelOp ::= PGE ;

EQU.       RelOp ::= PEQU ;

NE.        RelOp ::= PNE ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;


position token PReturn 'r''e''t''u''r''n' ;
position token PIf 'i''f' ;
position token PWhile 'w''h''i''l''e' ;
position token PFor 'f''o''r' ;											--nowe
position token PNew 'n''e''w' ;											--nowe
position token PIdent (letter (letter|digit|'_'|'\'')*) ;

--position token PNeg '-' ;
position token PNot '!' ;
position token PPlus '+' ;
position token PMinus '-' ;
position token PTimes '*' ;
position token PDiv '/' ;
position token PMod '%' ;
position token PLTH '<' ;
position token PLE '<''=' ;
position token PGTH '>' ;
position token PGE '>''=' ;
position token PEQU '=''=' ;
position token PNE '!''=' ;
position token PAnd '&''&' ;
position token POr '|''|' ;



